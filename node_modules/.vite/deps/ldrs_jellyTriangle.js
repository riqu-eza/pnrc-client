import {
  __publicField
} from "./chunk-EWTE5DHJ.js";

// node_modules/ldrs/dist/lib/LdrsBaseElement.js
var t = class extends HTMLElement {
  constructor() {
    super();
    __publicField(this, "_propsToUpgrade", {});
    __publicField(this, "shadow");
    __publicField(this, "template");
    __publicField(this, "defaultProps");
    __publicField(this, "isAttached", false);
    this.shadow = this.attachShadow({ mode: "open" }), this.template = document.createElement("template");
  }
  storePropsToUpgrade(t3) {
    t3.forEach((t4) => {
      this.hasOwnProperty(t4) && void 0 !== this[t4] && (this._propsToUpgrade[t4] = this[t4], delete this[t4]);
    });
  }
  upgradeStoredProps() {
    Object.entries(this._propsToUpgrade).forEach(([t3, e]) => {
      this.setAttribute(t3, e);
    });
  }
  reflect(t3) {
    t3.forEach((t4) => {
      Object.defineProperty(this, t4, { set(e) {
        "string,number".includes(typeof e) ? this.setAttribute(t4, e.toString()) : this.removeAttribute(t4);
      }, get() {
        return this.getAttribute(t4);
      } });
    });
  }
  applyDefaultProps(t3) {
    this.defaultProps = t3, Object.entries(t3).forEach(([t4, e]) => {
      this[t4] = this[t4] || e.toString();
    });
  }
};

// node_modules/ldrs/dist/elements/jellyTriangle.js
var t2 = ':host{align-items:center;display:inline-flex;flex-shrink:0;height:var(--uib-size);justify-content:center;width:var(--uib-size)}:host([hidden]){display:none}.container{filter:url(#uib-jelly-triangle-ooze);height:var(--uib-size);position:relative;width:var(--uib-size)}.container:after,.container:before,.dot{background-color:var(--uib-color);border-radius:100%;content:"";height:33%;position:absolute;transition:background-color .3s ease;width:33%;will-change:transform}.dot{animation:grow var(--uib-speed) ease infinite;left:30%;top:6%}.container:before{animation:grow var(--uib-speed) ease calc(var(--uib-speed)*-.666) infinite;bottom:6%;right:0}.container:after{animation:grow var(--uib-speed) ease calc(var(--uib-speed)*-.333) infinite;bottom:6%;left:0}.traveler{animation:triangulate var(--uib-speed) ease infinite;background-color:var(--uib-color);border-radius:100%;height:33%;left:30%;top:6%;transition:background-color .3s ease;width:33%}.svg,.traveler{position:absolute}.svg{height:0;width:0}@keyframes triangulate{0%,to{transform:none}33.333%{transform:translate(120%,175%)}66.666%{transform:translate(-95%,175%)}}@keyframes grow{0%,85%,to{transform:scale(1.5)}50%,60%{transform:scale(0)}}';
var i = class extends t {
  constructor() {
    super();
    __publicField(this, "_attributes", ["size", "color", "speed"]);
    __publicField(this, "size");
    __publicField(this, "color");
    __publicField(this, "speed");
    this.storePropsToUpgrade(this._attributes), this.reflect(this._attributes);
  }
  static get observedAttributes() {
    return ["size", "color", "speed"];
  }
  connectedCallback() {
    this.upgradeStoredProps(), this.applyDefaultProps({ size: 30, color: "black", speed: 1.75 }), this.template.innerHTML = `
      <div
        class="container"
      >
      <div class="dot"></div>
      <div class="traveler"></div>
      </div>
      <svg width="0" height="0" class="svg">
        <defs>
          <filter id="uib-jelly-triangle-ooze">
            <feGaussianBlur
              in="SourceGraphic"
              stdDeviation=${parseInt(this.size) / 9}
              result="blur"
            />
            <feColorMatrix
              in="blur"
              mode="matrix"
              values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7"
              result="ooze"
            />
            <feBlend in="SourceGraphic" in2="ooze" />
          </filter>
        </defs>
      </svg>
      <style>
        :host{
          --uib-size: ${this.size}px;
          --uib-color: ${this.color};
          --uib-speed: ${this.speed}s;
        }
        ${t2}
      </style>
    `, this.shadow.replaceChildren(this.template.content.cloneNode(true));
  }
  attributeChangedCallback() {
    const e = this.shadow.querySelector("style");
    e && (e.innerHTML = `
      :host{
        --uib-size: ${this.size}px;
        --uib-color: ${this.color};
        --uib-speed: ${this.speed}s;
      }
      ${t2}
    `);
  }
};
var s = { register: (e = "l-jelly-triangle") => {
  customElements.get(e) || customElements.define(e, class extends i {
  });
}, element: i };

// node_modules/ldrs/dist/auto/jellyTriangle.js
s.register();
//# sourceMappingURL=ldrs_jellyTriangle.js.map
